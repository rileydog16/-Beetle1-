test('log error if access non-existent property at any level', () => {
    act( () => {setState('app.page1.data', {a: 10, value: {b: 20, c: { d: 30, value: {e: 40}}}}) } )
    let newState = stateWithDefaultsFor('app.page1.data', {})
    expect(newState).toMatchObject({a: 10, value: {b: 20, c: { d: 30, value: {e: 40}}}})
    expect(newState.valueOf()).toMatchObject({b: 20, c: { d: 30, value: {e: 40}}})
    expect(newState.x).toBeUndefined()
    expect(newState.b.x).toBeUndefined()
    expect(newState.c.d.x).toBeUndefined()
    expect(newState.c.e.x).toBeUndefined()

    // const error = jest.spyOn(console, "error").mockImplementation(() => {})
    // try {
    //     expect(newState.x).toBeUndefined()
    //     expect(error).toBeCalledWith("Attempt to access non-existent data item app.page1.data.x")
    //
    // } finally {
    //     error.mockReset();
    // }

})



        const propertyExists = (prop in obj) || isObject(obj.value) && prop in obj.value || isObject(obj.defaultValue) && prop in obj.defaultValue
        if (!propertyExists) {
            console.error(`Attempt to access non-existent data item ${path}.${prop.toString()}`)
        }
        const result = obj[prop] ?? obj.value?.[prop] ?? obj.defaultValue?.[prop]
        return isPlainObject(result) ? proxify(result, `${path}.${prop.toString()}`) : result
